service: thumbshot
frameworkVersion: '3'
params:
  default:
    domainName: ${sls:stage}.thumbshot.io
    apiDomainName: api.${param:domainName}
    amplifyOrigin: https://${param:domainName}
    websiteBucketName: thumbshot-${sls:stage}-website
    websiteHostedZoneId: Z084235213DTZ50AT2VLL
    dynamoDBTablePrefix: ${sls:stage}-
    youtubeVideosApiPath: /youtube/videos
  prod:
    domainName: thumbshot.io
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  deploymentMethod: direct
  logs:
    httpApi: true
  httpApi:
    metrics: true
    cors:
      allowedOrigins:
        - 'http://localhost:5173'
        - 'https://${param:domainName}'
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - POST
        - PUT
        - GET
        - DELETE
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - !Ref UserPool
        audience: !Ref WebUserPoolClient
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-s3-sync
  - serverless-certificate-creator
  - serverless-plugin-aws-alerts
  - aws-amplify-serverless-plugin
custom:
  s3Sync:
    noSync: true
    buckets:
      - bucketName: ${param:websiteBucketName}
        localDir: ./dist
        deleteRemoved: true
  customCertificate:
    certificateName: '${param:domainName}'
    hostedZoneIds: ${param:websiteHostedZoneId}
    subjectAlternativeNames :
      - '*.${param:domainName}'
  webpack:
    webpackConfig: 'webpack.config.cjs'
    includeModules:
      forceExclude:
        - '@sparticuz/chromium'
        - '@aws-sdk/client-s3'
        - '@aws-sdk/client-cognito-identity-provider'
        - '@aws-sdk/client-dynamodb'
        - '@aws-sdk/lib-dynamodb'
        - '@aws-sdk/s3-request-presigner'
  alerts:
    topics:
      alarm:
        topic: ${self:service}-${sls:stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: t.k.gregory@gmail.com
    alarms:
      - functionErrors
  setNgrokHeader:
    dev: true
    prod: false
  amplify:
    - filename: ./src/aws-exports.ts
      type: javascript
      appClient: WebUserPoolClient
      s3bucket: disabled
      oauthDomain: 'auth.${param:domainName}'
      redirectSignIn: '${param:amplifyOrigin}/'
      redirectSignOut: '${param:amplifyOrigin}/'
package:
  patterns:
    - '!**'
    - 'functions/**'
functions:
  screenshotBoard:
    handler: functions/post/screenshot-board.handler
    events:
      - httpApi:
          path: /boards/{id}/screenshot
          method: post
    layers:
      - !Ref ChromiumLambdaLayer
    environment:
      BUCKET_NAME: !Ref PreviewsBucket
      BUCKET_DOMAIN_NAME: !GetAtt PreviewsBucket.DomainName
      DOMAIN_NAME: '${param:domainName}'
      SET_NGROK_HEADER: ${self:custom.setNgrokHeader.${opt:stage, sls:stage}}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: !Sub 'arn:aws:s3:::${PreviewsBucket}/*'
    timeout: 25
    memorySize: 4096
  createPresignedUploadUrl:
    handler: functions/post/create-presigned-upload-url.handler
    events:
      - httpApi:
          path: /presigned-upload-url
          method: post
          authorizer: serviceAuthorizer
    environment:
      BUCKET_NAME: !Ref ThumbnailsBucket
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: !Sub 'arn:aws:s3:::${ThumbnailsBucket}/*'
  preSignUp:
    handler: functions/cognito/pre-sign-up.handler
    runtime: nodejs18.x
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminLinkProviderForUser
          - cognito-idp:ListUsers
        Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'
  deleteBoard:
    handler: functions/delete/delete-board.handler
    runtime: nodejs18.x
    events:
      - httpApi:
          path: /user/boards/{id}
          method: delete
          authorizer: serviceAuthorizer
    environment:
      BOARDS_TABLE_NAME: !Ref BoardsTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - !GetAtt BoardsTable.Arn
          - !Sub '${BoardsTable.Arn}/index/userIdSortByNameIndex'
          - !Sub '${BoardsTable.Arn}/index/userIdSortByCreatedIndex'
  getBoard:
    handler: functions/get/get-board.handler
    runtime: nodejs18.x
    events:
      - httpApi:
          path: /user/boards/{id}
          method: get
          authorizer: serviceAuthorizer
    environment:
      BOARDS_TABLE_NAME: !Ref BoardsTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt BoardsTable.Arn
          - !Sub '${BoardsTable.Arn}/index/userIdSortByNameIndex'
          - !Sub '${BoardsTable.Arn}/index/userIdSortByCreatedIndex'
  getBoards:
    handler: functions/get/get-boards.handler
    runtime: nodejs18.x
    events:
      - httpApi:
          path: /user/boards
          method: get
          authorizer: serviceAuthorizer
    environment:
      BOARDS_TABLE_NAME: !Ref BoardsTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - !GetAtt BoardsTable.Arn
          - !Sub '${BoardsTable.Arn}/index/userIdSortByNameIndex'
          - !Sub '${BoardsTable.Arn}/index/userIdSortByCreatedIndex'
  createBoard:
    handler: functions/post/create-board.handler
    runtime: nodejs18.x
    events:
      - httpApi:
          path: /user/boards
          method: post
          authorizer: serviceAuthorizer
    environment:
      BOARDS_TABLE_NAME: !Ref BoardsTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - !GetAtt BoardsTable.Arn
          - !Sub '${BoardsTable.Arn}/index/userIdSortByNameIndex'
          - !Sub '${BoardsTable.Arn}/index/userIdSortByCreatedIndex'
  updateBoard:
    handler: functions/put/update-board.handler
    runtime: nodejs18.x
    events:
      - httpApi:
          path: /user/boards/{id}
          method: put
          authorizer: serviceAuthorizer
    environment:
      BOARDS_TABLE_NAME: !Ref BoardsTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt BoardsTable.Arn
          - !Sub '${BoardsTable.Arn}/index/userIdSortByNameIndex'
          - !Sub '${BoardsTable.Arn}/index/userIdSortByCreatedIndex'
  getAnyBoard:
    handler: functions/get/get-any-board.handler
    runtime: nodejs18.x
    events:
      - httpApi:
          path: /boards/{id}
          method: get
    environment:
      BOARDS_TABLE_NAME: !Ref BoardsTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt BoardsTable.Arn
          - !Sub '${BoardsTable.Arn}/index/userIdSortByNameIndex'
          - !Sub '${BoardsTable.Arn}/index/userIdSortByCreatedIndex'
  getYouTubeVideoDetails:
    handler: functions/get/get-youtube-video-details.handler
    runtime: nodejs18.x
    events:
      - httpApi:
          path: ${param:youtubeVideosApiPath}/{id}
          method: get
          authorizer: serviceAuthorizer
    environment:
      YOUTUBE_API_KEY: ${ssm:/aws/reference/secretsmanager/YOUTUBE_API_KEY}
  getRandomYouTubeVideos:
    handler: functions/get/get-random-youtube-videos.handler
    runtime: nodejs18.x
    events:
      - httpApi:
          path: ${param:youtubeVideosApiPath}
          method: get
    environment:
      YOUTUBE_API_KEY: ${ssm:/aws/reference/secretsmanager/YOUTUBE_API_KEY}
layers:
  chromium:
    package:
      artifact: layer/chromium-v123.0.1-layer.zip
resources:
  Conditions:
    IsNonProd:
      !Not [!Equals ['${sls:stage}', prod]]
  Resources:
    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: !Sub '${AWS::StackName}-UserPoolClient'
        UserPoolId: !Ref UserPool
        PreventUserExistenceErrors: ENABLED
        AllowedOAuthFlowsUserPoolClient: true
        SupportedIdentityProviders:
          - !Ref GoogleUserPoolIdentityProvider
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
          - email
          - profile
        CallbackURLs:
          - 'https://${param:domainName}/'
          - !If [IsNonProd, 'http://localhost:5173/', !Ref "AWS::NoValue"]
        LogoutURLs:
          - 'https://${param:domainName}/'
          - !If [IsNonProd, 'http://localhost:5173/', !Ref "AWS::NoValue"]
    GoogleUserPoolIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId: !Ref UserPool
        ProviderName: Google
        ProviderDetails:
          client_id: "358520425714-542p2gto6uj4lmfeedmggtjrk2dvplku.apps.googleusercontent.com"
          client_secret: ${ssm:/aws/reference/secretsmanager/GOOGLE_CLIENT_SECRET}
          authorize_scopes: "profile email openid"
        ProviderType: Google
        AttributeMapping:
          email: email
          email_verified: email_verified
    PreSignUpLambdaFunctionPolicy:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt PreSignUpLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: cognito-idp.amazonaws.com
        SourceAccount: !Ref 'AWS::AccountId'
        SourceArn: !GetAtt UserPool.Arn
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: !Sub '${AWS::StackName}-UserPool'
        DeletionProtection: ACTIVE
        UsernameAttributes:
          - email
        AutoVerifiedAttributes: ['email']
        UserAttributeUpdateSettings:
          AttributesRequireVerificationBeforeUpdate: ['email']
        Schema:
          - Name: email
            Mutable: true
            Required: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
        LambdaConfig:
          PreSignUp: !GetAtt PreSignUpLambdaFunction.Arn
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          From: !Sub 'Tom Gregory <no-reply@${SESEmailIdentity}>'
          SourceArn: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${SESEmailIdentity}'
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: !Ref UserPool
        Domain: 'auth.${param:domainName}'
        CustomDomainConfig:
          CertificateArn: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}
    UserPoolDomainDNSRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${param:websiteHostedZoneId}
        Name: 'auth.${param:domainName}'
        Type: A
        AliasTarget:
          DNSName: !GetAtt UserPoolDomain.CloudFrontDistribution
          HostedZoneId: Z2FDTNDATAQYW2 # value as described in AWS docs
    ProUserPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: pro
        UserPoolId: !Ref UserPool
    AutomatedTestUser:
      Type: AWS::Cognito::UserPoolUser
      Condition: IsNonProd
      Properties:
        Username: t.k.gregory+automatedtestuser@gmail.com
        DesiredDeliveryMediums:
          - EMAIL
        UserPoolId: !Ref UserPool
        UserAttributes:
          - Name: email
            Value: t.k.gregory+automatedtestuser@gmail.com
          - Name: email_verified
            Value: true
    ProAutomatedTestUser:
      Type: AWS::Cognito::UserPoolUser
      Condition: IsNonProd
      Properties:
        Username: t.k.gregory+proautomatedtestuser@gmail.com
        DesiredDeliveryMediums:
          - EMAIL
        UserPoolId: !Ref UserPool
        UserAttributes:
          - Name: email
            Value: t.k.gregory+proautomatedtestuser@gmail.com
          - Name: email_verified
            Value: true
    ProAutomatedTestUserGroupAttachment:
      Type: AWS::Cognito::UserPoolUserToGroupAttachment
      Condition: IsNonProd
      Properties:
        GroupName: !Ref ProUserPoolGroup
        Username: !Ref ProAutomatedTestUser
        UserPoolId: !Ref UserPool
    PreviewsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: thumbshot-${sls:stage}-previews
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
              AllowedOrigins:
                - 'http://localhost:5173'
                - 'https://${param:domainName}'
        LifecycleConfiguration:
          Rules:
            - Id: DeleteRule
              Status: Enabled
              ExpirationInDays: 7
    PreviewsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PreviewsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource: !Sub 'arn:aws:s3:::${PreviewsBucket}/*'
              Principal: '*'
    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: thumbshot-${sls:stage}-thumbnails
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - 'http://localhost:5173'
                - 'https://${param:domainName}'
    ThumbnailsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ThumbnailsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource: !Sub 'arn:aws:s3:::${ThumbnailsBucket}/*'
              Principal: '*'
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${param:websiteBucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Principal: '*'
              Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Aliases:
            - ${param:domainName}
          ViewerCertificate:
            AcmCertificateArn: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
          CacheBehaviors:
            - PathPattern: /js/script.js
              TargetOriginId: Plausible
              ViewerProtocolPolicy: https-only
              CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
              AllowedMethods:
                - GET
                - HEAD
            - PathPattern: /api/event
              TargetOriginId: Plausible
              ViewerProtocolPolicy: https-only
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
              OriginRequestPolicyId: acba4595-bd28-49b8-b9fe-13317c0390fa # UserAgentRefererHeaders
              AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
          Origins:
          - Id: S3Origin
            DomainName: !Select [1, !Split ["//", !GetAtt WebsiteBucket.WebsiteURL]]
            CustomOriginConfig:
              OriginProtocolPolicy: 'http-only'
          - Id: Plausible
            DomainName: plausible.io
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
    WebsiteDNSRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${param:websiteHostedZoneId}
        Name: ${param:domainName}.
        Type: A
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # value as described in AWS docs
    ApiCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Aliases:
            - ${param:apiDomainName}
          ViewerCertificate:
            AcmCertificateArn: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
          CacheBehaviors:
            - PathPattern: ${param:youtubeVideosApiPath}*
              TargetOriginId: ApiGatewayOrigin
              ViewerProtocolPolicy: redirect-to-https
              CachePolicyId: !Ref ApiCachePolicy
              OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
          Origins:
          - Id: ApiGatewayOrigin
            DomainName: !Select [1, !Split ["//", !GetAtt HttpApi.ApiEndpoint]]
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
    ApiDNSRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${param:websiteHostedZoneId}
        Name: ${param:apiDomainName}.
        Type: A
        AliasTarget:
          DNSName: !GetAtt ApiCloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # value as described in AWS docs
    ApiCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          DefaultTTL: 300
          MaxTTL: 31536000
          MinTTL: 1
          Name: ApiCachePolicy-${sls:stage}
          ParametersInCacheKeyAndForwardedToOrigin:
            CookiesConfig:
              CookieBehavior: none
            EnableAcceptEncodingBrotli: true
            EnableAcceptEncodingGzip: true
            HeadersConfig:
              HeaderBehavior: whitelist
              Headers:
                - Origin
                - Authorization
            QueryStringsConfig:
              QueryStringBehavior: none
    SESEmailIdentity:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: '${param:domainName}'
    BoardsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:dynamoDBTablePrefix}boards
        BillingMode: PAY_PER_REQUEST
        DeletionProtectionEnabled: true
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: created
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userIdSortByNameIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE
            Projection:
              NonKeyAttributes: []
              ProjectionType: "ALL"
          - IndexName: userIdSortByCreatedIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: created
                KeyType: RANGE
            Projection:
              NonKeyAttributes: []
              ProjectionType: "ALL"
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true