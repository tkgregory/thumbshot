service: thumbshot
frameworkVersion: '3'
params:
  default:
    domainName: ${sls:stage}.thumbshot.io
    apiDomainName: api.${param:domainName}
    amplifyOrigin: https://${param:domainName}
    websiteBucketName: thumbshot-${sls:stage}-website
    websiteHostedZoneId: Z084235213DTZ50AT2VLL
  prod:
    domainName: thumbshot.io
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  deploymentMethod: direct
  httpApi:
    cors:
      allowedOrigins:
        - 'http://localhost:5173'
        - 'https://${param:domainName}'
      allowedHeaders:
        - Content-Type
      allowedMethods:
        - POST
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-s3-sync
  - serverless-certificate-creator
  - serverless-plugin-aws-alerts
  - aws-amplify-serverless-plugin
custom:
  s3Sync:
    - bucketName: ${param:websiteBucketName}
      localDir: ./dist
      deleteRemoved: true
  customCertificate:
    certificateName: '${param:domainName}'
    hostedZoneIds: ${param:websiteHostedZoneId}
    subjectAlternativeNames :
      - '*.${param:domainName}'
  webpack:
    webpackConfig: 'webpack.config.cjs'
    includeModules:
      forceExclude:
        - '@sparticuz/chromium'
        - '@aws-sdk/client-s3'
  alerts:
    topics:
      alarm:
        topic: ${self:service}-${sls:stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: t.k.gregory@gmail.com
    alarms:
      - functionErrors
  setNgrokHeader:
    dev: true
    prod: false
  amplify:
    - filename: ./src/aws-exports.js
      type: javascript
      appClient: WebUserPoolClient
      s3bucket: disabled
      oauthDomain: 'auth.${param:domainName}'
      redirectSignIn: '${param:amplifyOrigin}/'
      redirectSignOut: '${param:amplifyOrigin}/'
package:
  patterns:
    - '!**'
    - 'functions/**'
functions:
  generatePreviewImage:
    handler: functions/post/generate-preview-image.handler
    events:
      - httpApi:
          path: /preview
          method: post
    layers:
      - !Ref ChromiumLambdaLayer
    environment:
      BUCKET_NAME: !Ref PreviewsBucket
      BUCKET_DOMAIN_NAME: !GetAtt PreviewsBucket.DomainName
      DOMAIN_NAME: '${param:domainName}'
      SET_NGROK_HEADER: ${self:custom.setNgrokHeader.${opt:stage, sls:stage}}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: !Sub 'arn:aws:s3:::${PreviewsBucket}/*'
    timeout: 25
    memorySize: 4096
layers:
  chromium:
    package:
      artifact: layer/chromium-v123.0.1-layer.zip
resources:
  Conditions:
    IsNonProd:
      !Not [!Equals ['${sls:stage}', prod]]
  Resources:
    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: !Sub '${AWS::StackName}-UserPoolClient'
        UserPoolId: !Ref UserPool
        PreventUserExistenceErrors: ENABLED
        AllowedOAuthFlowsUserPoolClient: true
        SupportedIdentityProviders:
          - Google
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
          - email
          - profile
        CallbackURLs:
          - 'https://${param:domainName}/'
          - !If [IsNonProd, 'http://localhost:5173/', !Ref "AWS::NoValue"]
        LogoutURLs:
          - 'https://${param:domainName}/'
          - !If [IsNonProd, 'http://localhost:5173/', !Ref "AWS::NoValue"]
    GoogleUserPoolIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId: !Ref UserPool
        ProviderName: Google
        ProviderDetails:
          client_id: "358520425714-542p2gto6uj4lmfeedmggtjrk2dvplku.apps.googleusercontent.com"
          client_secret: ${ssm:/aws/reference/secretsmanager/GOOGLE_CLIENT_SECRET}
          authorize_scopes: "profile email openid"
        ProviderType: Google
        AttributeMapping:
          email: email
          email_verified: email_verified
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: !Sub '${AWS::StackName}-UserPool'
        DeletionProtection: ACTIVE
        UsernameAttributes:
          - email
        AutoVerifiedAttributes: ['email']
        UserAttributeUpdateSettings:
          AttributesRequireVerificationBeforeUpdate: ['email']
        Schema:
          - Name: email
            Mutable: true
            Required: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          From: !Sub 'Tom Gregory <no-reply@${SESEmailIdentity}>'
          SourceArn: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${SESEmailIdentity}'
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: !Ref UserPool
        Domain: 'auth.${param:domainName}'
        CustomDomainConfig:
          CertificateArn: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}
    UserPoolDomainDNSRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${param:websiteHostedZoneId}
        Name: 'auth.${param:domainName}'
        Type: A
        AliasTarget:
          DNSName: !GetAtt UserPoolDomain.CloudFrontDistribution
          HostedZoneId: Z2FDTNDATAQYW2 # value as described in AWS docs
    PreviewsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: thumbshot-${sls:stage}-previews
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        LifecycleConfiguration:
          Rules:
            - Id: DeleteRule
              Status: Enabled
              ExpirationInDays: 7
    PreviewsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PreviewsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource: !Sub 'arn:aws:s3:::${PreviewsBucket}/*'
              Principal: '*'
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${param:websiteBucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Principal: '*'
              Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Aliases:
            - ${param:domainName}
          ViewerCertificate:
            AcmCertificateArn: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
          CacheBehaviors:
            - PathPattern: /js/script.js
              TargetOriginId: Plausible
              ViewerProtocolPolicy: https-only
              CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
              AllowedMethods:
                - GET
                - HEAD
            - PathPattern: /api/event
              TargetOriginId: Plausible
              ViewerProtocolPolicy: https-only
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
              OriginRequestPolicyId: acba4595-bd28-49b8-b9fe-13317c0390fa # UserAgentRefererHeaders
              AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
          Origins:
          - Id: S3Origin
            DomainName: !Select [1, !Split ["//", !GetAtt WebsiteBucket.WebsiteURL]]
            CustomOriginConfig:
              OriginProtocolPolicy: 'http-only'
          - Id: Plausible
            DomainName: plausible.io
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
    WebsiteDNSRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${param:websiteHostedZoneId}
        Name: ${param:domainName}.
        Type: A
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # value as described in AWS docs
    ApiDomainName:
      Type: AWS::ApiGatewayV2::DomainName
      Properties:
        DomainName: '${param:apiDomainName}'
        DomainNameConfigurations:
          - CertificateArn: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}
    ApiMapping:
      Type: AWS::ApiGatewayV2::ApiMapping
      DependsOn: ApiDomainName
      Properties:
        DomainName: '${param:apiDomainName}'
        ApiId: !Ref HttpApi
        Stage: '$default'
    ApiRecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${param:websiteHostedZoneId}
        RecordSets:
          - Name: '${param:apiDomainName}'
            Type: A
            AliasTarget:
              HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId
              DNSName: !GetAtt ApiDomainName.RegionalDomainName
    SESEmailIdentity:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: '${param:domainName}'